
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model authors
 */

export type authors = {
  id: number
  name: string
  region: number
}

/**
 * Model creatures
 */

export type creatures = {
  id: number
  name: string
  race: number
}

/**
 * Model deities
 */

export type deities = {
  id: number
  name: string
  domain: string[]
  region: string
  created_on: Date | null
  type: string | null
}

/**
 * Model items
 */

export type items = {
  id: number
  name: string
}

/**
 * Model mortals
 */

export type mortals = {
  id: number
  name: string
}

/**
 * Model works
 */

export type works = {
  id: number
  name: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Authors
 * const authors = await prisma.authors.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Authors
   * const authors = await prisma.authors.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.authors`: Exposes CRUD operations for the **authors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authors
    * const authors = await prisma.authors.findMany()
    * ```
    */
  get authors(): Prisma.authorsDelegate<GlobalReject>;

  /**
   * `prisma.creatures`: Exposes CRUD operations for the **creatures** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Creatures
    * const creatures = await prisma.creatures.findMany()
    * ```
    */
  get creatures(): Prisma.creaturesDelegate<GlobalReject>;

  /**
   * `prisma.deities`: Exposes CRUD operations for the **deities** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Deities
    * const deities = await prisma.deities.findMany()
    * ```
    */
  get deities(): Prisma.deitiesDelegate<GlobalReject>;

  /**
   * `prisma.items`: Exposes CRUD operations for the **items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.items.findMany()
    * ```
    */
  get items(): Prisma.itemsDelegate<GlobalReject>;

  /**
   * `prisma.mortals`: Exposes CRUD operations for the **mortals** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mortals
    * const mortals = await prisma.mortals.findMany()
    * ```
    */
  get mortals(): Prisma.mortalsDelegate<GlobalReject>;

  /**
   * `prisma.works`: Exposes CRUD operations for the **works** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Works
    * const works = await prisma.works.findMany()
    * ```
    */
  get works(): Prisma.worksDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.24.1
   * Query Engine version: 18095475d5ee64536e2f93995e48ad800737a9e4
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    authors: 'authors',
    creatures: 'creatures',
    deities: 'deities',
    items: 'items',
    mortals: 'mortals',
    works: 'works'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model authors
   */


  export type AggregateAuthors = {
    _count: AuthorsCountAggregateOutputType | null
    count: AuthorsCountAggregateOutputType | null
    _avg: AuthorsAvgAggregateOutputType | null
    avg: AuthorsAvgAggregateOutputType | null
    _sum: AuthorsSumAggregateOutputType | null
    sum: AuthorsSumAggregateOutputType | null
    _min: AuthorsMinAggregateOutputType | null
    min: AuthorsMinAggregateOutputType | null
    _max: AuthorsMaxAggregateOutputType | null
    max: AuthorsMaxAggregateOutputType | null
  }

  export type AuthorsAvgAggregateOutputType = {
    id: number | null
    region: number | null
  }

  export type AuthorsSumAggregateOutputType = {
    id: number | null
    region: number | null
  }

  export type AuthorsMinAggregateOutputType = {
    id: number | null
    name: string | null
    region: number | null
  }

  export type AuthorsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    region: number | null
  }

  export type AuthorsCountAggregateOutputType = {
    id: number
    name: number
    region: number
    _all: number
  }


  export type AuthorsAvgAggregateInputType = {
    id?: true
    region?: true
  }

  export type AuthorsSumAggregateInputType = {
    id?: true
    region?: true
  }

  export type AuthorsMinAggregateInputType = {
    id?: true
    name?: true
    region?: true
  }

  export type AuthorsMaxAggregateInputType = {
    id?: true
    name?: true
    region?: true
  }

  export type AuthorsCountAggregateInputType = {
    id?: true
    name?: true
    region?: true
    _all?: true
  }

  export type AuthorsAggregateArgs = {
    /**
     * Filter which authors to aggregate.
     * 
    **/
    where?: authorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authors to fetch.
     * 
    **/
    orderBy?: Enumerable<authorsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: authorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned authors
    **/
    _count?: true | AuthorsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | AuthorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuthorsAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: AuthorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuthorsSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: AuthorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthorsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: AuthorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthorsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: AuthorsMaxAggregateInputType
  }

  export type GetAuthorsAggregateType<T extends AuthorsAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthors[P]>
      : GetScalarType<T[P], AggregateAuthors[P]>
  }


    
    
  export type AuthorsGroupByArgs = {
    where?: authorsWhereInput
    orderBy?: Enumerable<authorsOrderByInput>
    by: Array<AuthorsScalarFieldEnum>
    having?: authorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthorsCountAggregateInputType | true
    _avg?: AuthorsAvgAggregateInputType
    _sum?: AuthorsSumAggregateInputType
    _min?: AuthorsMinAggregateInputType
    _max?: AuthorsMaxAggregateInputType
  }


  export type AuthorsGroupByOutputType = {
    id: number
    name: string
    region: number
    _count: AuthorsCountAggregateOutputType | null
    _avg: AuthorsAvgAggregateOutputType | null
    _sum: AuthorsSumAggregateOutputType | null
    _min: AuthorsMinAggregateOutputType | null
    _max: AuthorsMaxAggregateOutputType | null
  }

  type GetAuthorsGroupByPayload<T extends AuthorsGroupByArgs> = Promise<
    Array<
      PickArray<AuthorsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof AuthorsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], AuthorsGroupByOutputType[P]> 
            : GetScalarType<T[P], AuthorsGroupByOutputType[P]>
        }
      > 
    >


  export type authorsSelect = {
    id?: boolean
    name?: boolean
    region?: boolean
  }

  export type authorsGetPayload<
    S extends boolean | null | undefined | authorsArgs,
    U = keyof S
      > = S extends true
        ? authors
    : S extends undefined
    ? never
    : S extends authorsArgs | authorsFindManyArgs
    ?'include' extends U
    ? authors 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof authors ?authors [P]
  : 
     never
  } 
    : authors
  : authors


  type authorsCountArgs = Merge<
    Omit<authorsFindManyArgs, 'select' | 'include'> & {
      select?: AuthorsCountAggregateInputType | true
    }
  >

  export interface authorsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Authors that matches the filter.
     * @param {authorsFindUniqueArgs} args - Arguments to find a Authors
     * @example
     * // Get one Authors
     * const authors = await prisma.authors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends authorsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, authorsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'authors'> extends True ? CheckSelect<T, Prisma__authorsClient<authors>, Prisma__authorsClient<authorsGetPayload<T>>> : CheckSelect<T, Prisma__authorsClient<authors | null >, Prisma__authorsClient<authorsGetPayload<T> | null >>

    /**
     * Find the first Authors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorsFindFirstArgs} args - Arguments to find a Authors
     * @example
     * // Get one Authors
     * const authors = await prisma.authors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends authorsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, authorsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'authors'> extends True ? CheckSelect<T, Prisma__authorsClient<authors>, Prisma__authorsClient<authorsGetPayload<T>>> : CheckSelect<T, Prisma__authorsClient<authors | null >, Prisma__authorsClient<authorsGetPayload<T> | null >>

    /**
     * Find zero or more Authors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authors
     * const authors = await prisma.authors.findMany()
     * 
     * // Get first 10 Authors
     * const authors = await prisma.authors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const authorsWithIdOnly = await prisma.authors.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends authorsFindManyArgs>(
      args?: SelectSubset<T, authorsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<authors>>, PrismaPromise<Array<authorsGetPayload<T>>>>

    /**
     * Create a Authors.
     * @param {authorsCreateArgs} args - Arguments to create a Authors.
     * @example
     * // Create one Authors
     * const Authors = await prisma.authors.create({
     *   data: {
     *     // ... data to create a Authors
     *   }
     * })
     * 
    **/
    create<T extends authorsCreateArgs>(
      args: SelectSubset<T, authorsCreateArgs>
    ): CheckSelect<T, Prisma__authorsClient<authors>, Prisma__authorsClient<authorsGetPayload<T>>>

    /**
     * Create many Authors.
     *     @param {authorsCreateManyArgs} args - Arguments to create many Authors.
     *     @example
     *     // Create many Authors
     *     const authors = await prisma.authors.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends authorsCreateManyArgs>(
      args?: SelectSubset<T, authorsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Authors.
     * @param {authorsDeleteArgs} args - Arguments to delete one Authors.
     * @example
     * // Delete one Authors
     * const Authors = await prisma.authors.delete({
     *   where: {
     *     // ... filter to delete one Authors
     *   }
     * })
     * 
    **/
    delete<T extends authorsDeleteArgs>(
      args: SelectSubset<T, authorsDeleteArgs>
    ): CheckSelect<T, Prisma__authorsClient<authors>, Prisma__authorsClient<authorsGetPayload<T>>>

    /**
     * Update one Authors.
     * @param {authorsUpdateArgs} args - Arguments to update one Authors.
     * @example
     * // Update one Authors
     * const authors = await prisma.authors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends authorsUpdateArgs>(
      args: SelectSubset<T, authorsUpdateArgs>
    ): CheckSelect<T, Prisma__authorsClient<authors>, Prisma__authorsClient<authorsGetPayload<T>>>

    /**
     * Delete zero or more Authors.
     * @param {authorsDeleteManyArgs} args - Arguments to filter Authors to delete.
     * @example
     * // Delete a few Authors
     * const { count } = await prisma.authors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends authorsDeleteManyArgs>(
      args?: SelectSubset<T, authorsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authors
     * const authors = await prisma.authors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends authorsUpdateManyArgs>(
      args: SelectSubset<T, authorsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Authors.
     * @param {authorsUpsertArgs} args - Arguments to update or create a Authors.
     * @example
     * // Update or create a Authors
     * const authors = await prisma.authors.upsert({
     *   create: {
     *     // ... data to create a Authors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Authors we want to update
     *   }
     * })
    **/
    upsert<T extends authorsUpsertArgs>(
      args: SelectSubset<T, authorsUpsertArgs>
    ): CheckSelect<T, Prisma__authorsClient<authors>, Prisma__authorsClient<authorsGetPayload<T>>>

    /**
     * Count the number of Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authorsCountArgs} args - Arguments to filter Authors to count.
     * @example
     * // Count the number of Authors
     * const count = await prisma.authors.count({
     *   where: {
     *     // ... the filter for the Authors we want to count
     *   }
     * })
    **/
    count<T extends authorsCountArgs>(
      args?: Subset<T, authorsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthorsAggregateArgs>(args: Subset<T, AuthorsAggregateArgs>): PrismaPromise<GetAuthorsAggregateType<T>>

    /**
     * Group by Authors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthorsGroupByArgs['orderBy'] }
        : { orderBy?: AuthorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthorsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for authors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__authorsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * authors findUnique
   */
  export type authorsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the authors
     * 
    **/
    select?: authorsSelect | null
    /**
     * Throw an Error if a authors can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which authors to fetch.
     * 
    **/
    where: authorsWhereUniqueInput
  }


  /**
   * authors findFirst
   */
  export type authorsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the authors
     * 
    **/
    select?: authorsSelect | null
    /**
     * Throw an Error if a authors can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which authors to fetch.
     * 
    **/
    where?: authorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authors to fetch.
     * 
    **/
    orderBy?: Enumerable<authorsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for authors.
     * 
    **/
    cursor?: authorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of authors.
     * 
    **/
    distinct?: Enumerable<AuthorsScalarFieldEnum>
  }


  /**
   * authors findMany
   */
  export type authorsFindManyArgs = {
    /**
     * Select specific fields to fetch from the authors
     * 
    **/
    select?: authorsSelect | null
    /**
     * Filter, which authors to fetch.
     * 
    **/
    where?: authorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of authors to fetch.
     * 
    **/
    orderBy?: Enumerable<authorsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing authors.
     * 
    **/
    cursor?: authorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` authors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` authors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AuthorsScalarFieldEnum>
  }


  /**
   * authors create
   */
  export type authorsCreateArgs = {
    /**
     * Select specific fields to fetch from the authors
     * 
    **/
    select?: authorsSelect | null
    /**
     * The data needed to create a authors.
     * 
    **/
    data: XOR<authorsCreateInput, authorsUncheckedCreateInput>
  }


  /**
   * authors createMany
   */
  export type authorsCreateManyArgs = {
    data: Enumerable<authorsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * authors update
   */
  export type authorsUpdateArgs = {
    /**
     * Select specific fields to fetch from the authors
     * 
    **/
    select?: authorsSelect | null
    /**
     * The data needed to update a authors.
     * 
    **/
    data: XOR<authorsUpdateInput, authorsUncheckedUpdateInput>
    /**
     * Choose, which authors to update.
     * 
    **/
    where: authorsWhereUniqueInput
  }


  /**
   * authors updateMany
   */
  export type authorsUpdateManyArgs = {
    data: XOR<authorsUpdateManyMutationInput, authorsUncheckedUpdateManyInput>
    where?: authorsWhereInput
  }


  /**
   * authors upsert
   */
  export type authorsUpsertArgs = {
    /**
     * Select specific fields to fetch from the authors
     * 
    **/
    select?: authorsSelect | null
    /**
     * The filter to search for the authors to update in case it exists.
     * 
    **/
    where: authorsWhereUniqueInput
    /**
     * In case the authors found by the `where` argument doesn't exist, create a new authors with this data.
     * 
    **/
    create: XOR<authorsCreateInput, authorsUncheckedCreateInput>
    /**
     * In case the authors was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<authorsUpdateInput, authorsUncheckedUpdateInput>
  }


  /**
   * authors delete
   */
  export type authorsDeleteArgs = {
    /**
     * Select specific fields to fetch from the authors
     * 
    **/
    select?: authorsSelect | null
    /**
     * Filter which authors to delete.
     * 
    **/
    where: authorsWhereUniqueInput
  }


  /**
   * authors deleteMany
   */
  export type authorsDeleteManyArgs = {
    where?: authorsWhereInput
  }


  /**
   * authors without action
   */
  export type authorsArgs = {
    /**
     * Select specific fields to fetch from the authors
     * 
    **/
    select?: authorsSelect | null
  }



  /**
   * Model creatures
   */


  export type AggregateCreatures = {
    _count: CreaturesCountAggregateOutputType | null
    count: CreaturesCountAggregateOutputType | null
    _avg: CreaturesAvgAggregateOutputType | null
    avg: CreaturesAvgAggregateOutputType | null
    _sum: CreaturesSumAggregateOutputType | null
    sum: CreaturesSumAggregateOutputType | null
    _min: CreaturesMinAggregateOutputType | null
    min: CreaturesMinAggregateOutputType | null
    _max: CreaturesMaxAggregateOutputType | null
    max: CreaturesMaxAggregateOutputType | null
  }

  export type CreaturesAvgAggregateOutputType = {
    id: number | null
    race: number | null
  }

  export type CreaturesSumAggregateOutputType = {
    id: number | null
    race: number | null
  }

  export type CreaturesMinAggregateOutputType = {
    id: number | null
    name: string | null
    race: number | null
  }

  export type CreaturesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    race: number | null
  }

  export type CreaturesCountAggregateOutputType = {
    id: number
    name: number
    race: number
    _all: number
  }


  export type CreaturesAvgAggregateInputType = {
    id?: true
    race?: true
  }

  export type CreaturesSumAggregateInputType = {
    id?: true
    race?: true
  }

  export type CreaturesMinAggregateInputType = {
    id?: true
    name?: true
    race?: true
  }

  export type CreaturesMaxAggregateInputType = {
    id?: true
    name?: true
    race?: true
  }

  export type CreaturesCountAggregateInputType = {
    id?: true
    name?: true
    race?: true
    _all?: true
  }

  export type CreaturesAggregateArgs = {
    /**
     * Filter which creatures to aggregate.
     * 
    **/
    where?: creaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of creatures to fetch.
     * 
    **/
    orderBy?: Enumerable<creaturesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: creaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` creatures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` creatures.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned creatures
    **/
    _count?: true | CreaturesCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | CreaturesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CreaturesAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: CreaturesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CreaturesSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: CreaturesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CreaturesMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: CreaturesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CreaturesMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: CreaturesMaxAggregateInputType
  }

  export type GetCreaturesAggregateType<T extends CreaturesAggregateArgs> = {
        [P in keyof T & keyof AggregateCreatures]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCreatures[P]>
      : GetScalarType<T[P], AggregateCreatures[P]>
  }


    
    
  export type CreaturesGroupByArgs = {
    where?: creaturesWhereInput
    orderBy?: Enumerable<creaturesOrderByInput>
    by: Array<CreaturesScalarFieldEnum>
    having?: creaturesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CreaturesCountAggregateInputType | true
    _avg?: CreaturesAvgAggregateInputType
    _sum?: CreaturesSumAggregateInputType
    _min?: CreaturesMinAggregateInputType
    _max?: CreaturesMaxAggregateInputType
  }


  export type CreaturesGroupByOutputType = {
    id: number
    name: string
    race: number
    _count: CreaturesCountAggregateOutputType | null
    _avg: CreaturesAvgAggregateOutputType | null
    _sum: CreaturesSumAggregateOutputType | null
    _min: CreaturesMinAggregateOutputType | null
    _max: CreaturesMaxAggregateOutputType | null
  }

  type GetCreaturesGroupByPayload<T extends CreaturesGroupByArgs> = Promise<
    Array<
      PickArray<CreaturesGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof CreaturesGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], CreaturesGroupByOutputType[P]> 
            : GetScalarType<T[P], CreaturesGroupByOutputType[P]>
        }
      > 
    >


  export type creaturesSelect = {
    id?: boolean
    name?: boolean
    race?: boolean
  }

  export type creaturesGetPayload<
    S extends boolean | null | undefined | creaturesArgs,
    U = keyof S
      > = S extends true
        ? creatures
    : S extends undefined
    ? never
    : S extends creaturesArgs | creaturesFindManyArgs
    ?'include' extends U
    ? creatures 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof creatures ?creatures [P]
  : 
     never
  } 
    : creatures
  : creatures


  type creaturesCountArgs = Merge<
    Omit<creaturesFindManyArgs, 'select' | 'include'> & {
      select?: CreaturesCountAggregateInputType | true
    }
  >

  export interface creaturesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Creatures that matches the filter.
     * @param {creaturesFindUniqueArgs} args - Arguments to find a Creatures
     * @example
     * // Get one Creatures
     * const creatures = await prisma.creatures.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends creaturesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, creaturesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'creatures'> extends True ? CheckSelect<T, Prisma__creaturesClient<creatures>, Prisma__creaturesClient<creaturesGetPayload<T>>> : CheckSelect<T, Prisma__creaturesClient<creatures | null >, Prisma__creaturesClient<creaturesGetPayload<T> | null >>

    /**
     * Find the first Creatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {creaturesFindFirstArgs} args - Arguments to find a Creatures
     * @example
     * // Get one Creatures
     * const creatures = await prisma.creatures.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends creaturesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, creaturesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'creatures'> extends True ? CheckSelect<T, Prisma__creaturesClient<creatures>, Prisma__creaturesClient<creaturesGetPayload<T>>> : CheckSelect<T, Prisma__creaturesClient<creatures | null >, Prisma__creaturesClient<creaturesGetPayload<T> | null >>

    /**
     * Find zero or more Creatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {creaturesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Creatures
     * const creatures = await prisma.creatures.findMany()
     * 
     * // Get first 10 Creatures
     * const creatures = await prisma.creatures.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const creaturesWithIdOnly = await prisma.creatures.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends creaturesFindManyArgs>(
      args?: SelectSubset<T, creaturesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<creatures>>, PrismaPromise<Array<creaturesGetPayload<T>>>>

    /**
     * Create a Creatures.
     * @param {creaturesCreateArgs} args - Arguments to create a Creatures.
     * @example
     * // Create one Creatures
     * const Creatures = await prisma.creatures.create({
     *   data: {
     *     // ... data to create a Creatures
     *   }
     * })
     * 
    **/
    create<T extends creaturesCreateArgs>(
      args: SelectSubset<T, creaturesCreateArgs>
    ): CheckSelect<T, Prisma__creaturesClient<creatures>, Prisma__creaturesClient<creaturesGetPayload<T>>>

    /**
     * Create many Creatures.
     *     @param {creaturesCreateManyArgs} args - Arguments to create many Creatures.
     *     @example
     *     // Create many Creatures
     *     const creatures = await prisma.creatures.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends creaturesCreateManyArgs>(
      args?: SelectSubset<T, creaturesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Creatures.
     * @param {creaturesDeleteArgs} args - Arguments to delete one Creatures.
     * @example
     * // Delete one Creatures
     * const Creatures = await prisma.creatures.delete({
     *   where: {
     *     // ... filter to delete one Creatures
     *   }
     * })
     * 
    **/
    delete<T extends creaturesDeleteArgs>(
      args: SelectSubset<T, creaturesDeleteArgs>
    ): CheckSelect<T, Prisma__creaturesClient<creatures>, Prisma__creaturesClient<creaturesGetPayload<T>>>

    /**
     * Update one Creatures.
     * @param {creaturesUpdateArgs} args - Arguments to update one Creatures.
     * @example
     * // Update one Creatures
     * const creatures = await prisma.creatures.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends creaturesUpdateArgs>(
      args: SelectSubset<T, creaturesUpdateArgs>
    ): CheckSelect<T, Prisma__creaturesClient<creatures>, Prisma__creaturesClient<creaturesGetPayload<T>>>

    /**
     * Delete zero or more Creatures.
     * @param {creaturesDeleteManyArgs} args - Arguments to filter Creatures to delete.
     * @example
     * // Delete a few Creatures
     * const { count } = await prisma.creatures.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends creaturesDeleteManyArgs>(
      args?: SelectSubset<T, creaturesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Creatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {creaturesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Creatures
     * const creatures = await prisma.creatures.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends creaturesUpdateManyArgs>(
      args: SelectSubset<T, creaturesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Creatures.
     * @param {creaturesUpsertArgs} args - Arguments to update or create a Creatures.
     * @example
     * // Update or create a Creatures
     * const creatures = await prisma.creatures.upsert({
     *   create: {
     *     // ... data to create a Creatures
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Creatures we want to update
     *   }
     * })
    **/
    upsert<T extends creaturesUpsertArgs>(
      args: SelectSubset<T, creaturesUpsertArgs>
    ): CheckSelect<T, Prisma__creaturesClient<creatures>, Prisma__creaturesClient<creaturesGetPayload<T>>>

    /**
     * Count the number of Creatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {creaturesCountArgs} args - Arguments to filter Creatures to count.
     * @example
     * // Count the number of Creatures
     * const count = await prisma.creatures.count({
     *   where: {
     *     // ... the filter for the Creatures we want to count
     *   }
     * })
    **/
    count<T extends creaturesCountArgs>(
      args?: Subset<T, creaturesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CreaturesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Creatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreaturesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CreaturesAggregateArgs>(args: Subset<T, CreaturesAggregateArgs>): PrismaPromise<GetCreaturesAggregateType<T>>

    /**
     * Group by Creatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreaturesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CreaturesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CreaturesGroupByArgs['orderBy'] }
        : { orderBy?: CreaturesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CreaturesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCreaturesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for creatures.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__creaturesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * creatures findUnique
   */
  export type creaturesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the creatures
     * 
    **/
    select?: creaturesSelect | null
    /**
     * Throw an Error if a creatures can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which creatures to fetch.
     * 
    **/
    where: creaturesWhereUniqueInput
  }


  /**
   * creatures findFirst
   */
  export type creaturesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the creatures
     * 
    **/
    select?: creaturesSelect | null
    /**
     * Throw an Error if a creatures can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which creatures to fetch.
     * 
    **/
    where?: creaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of creatures to fetch.
     * 
    **/
    orderBy?: Enumerable<creaturesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for creatures.
     * 
    **/
    cursor?: creaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` creatures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` creatures.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of creatures.
     * 
    **/
    distinct?: Enumerable<CreaturesScalarFieldEnum>
  }


  /**
   * creatures findMany
   */
  export type creaturesFindManyArgs = {
    /**
     * Select specific fields to fetch from the creatures
     * 
    **/
    select?: creaturesSelect | null
    /**
     * Filter, which creatures to fetch.
     * 
    **/
    where?: creaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of creatures to fetch.
     * 
    **/
    orderBy?: Enumerable<creaturesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing creatures.
     * 
    **/
    cursor?: creaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` creatures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` creatures.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CreaturesScalarFieldEnum>
  }


  /**
   * creatures create
   */
  export type creaturesCreateArgs = {
    /**
     * Select specific fields to fetch from the creatures
     * 
    **/
    select?: creaturesSelect | null
    /**
     * The data needed to create a creatures.
     * 
    **/
    data: XOR<creaturesCreateInput, creaturesUncheckedCreateInput>
  }


  /**
   * creatures createMany
   */
  export type creaturesCreateManyArgs = {
    data: Enumerable<creaturesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * creatures update
   */
  export type creaturesUpdateArgs = {
    /**
     * Select specific fields to fetch from the creatures
     * 
    **/
    select?: creaturesSelect | null
    /**
     * The data needed to update a creatures.
     * 
    **/
    data: XOR<creaturesUpdateInput, creaturesUncheckedUpdateInput>
    /**
     * Choose, which creatures to update.
     * 
    **/
    where: creaturesWhereUniqueInput
  }


  /**
   * creatures updateMany
   */
  export type creaturesUpdateManyArgs = {
    data: XOR<creaturesUpdateManyMutationInput, creaturesUncheckedUpdateManyInput>
    where?: creaturesWhereInput
  }


  /**
   * creatures upsert
   */
  export type creaturesUpsertArgs = {
    /**
     * Select specific fields to fetch from the creatures
     * 
    **/
    select?: creaturesSelect | null
    /**
     * The filter to search for the creatures to update in case it exists.
     * 
    **/
    where: creaturesWhereUniqueInput
    /**
     * In case the creatures found by the `where` argument doesn't exist, create a new creatures with this data.
     * 
    **/
    create: XOR<creaturesCreateInput, creaturesUncheckedCreateInput>
    /**
     * In case the creatures was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<creaturesUpdateInput, creaturesUncheckedUpdateInput>
  }


  /**
   * creatures delete
   */
  export type creaturesDeleteArgs = {
    /**
     * Select specific fields to fetch from the creatures
     * 
    **/
    select?: creaturesSelect | null
    /**
     * Filter which creatures to delete.
     * 
    **/
    where: creaturesWhereUniqueInput
  }


  /**
   * creatures deleteMany
   */
  export type creaturesDeleteManyArgs = {
    where?: creaturesWhereInput
  }


  /**
   * creatures without action
   */
  export type creaturesArgs = {
    /**
     * Select specific fields to fetch from the creatures
     * 
    **/
    select?: creaturesSelect | null
  }



  /**
   * Model deities
   */


  export type AggregateDeities = {
    _count: DeitiesCountAggregateOutputType | null
    count: DeitiesCountAggregateOutputType | null
    _avg: DeitiesAvgAggregateOutputType | null
    avg: DeitiesAvgAggregateOutputType | null
    _sum: DeitiesSumAggregateOutputType | null
    sum: DeitiesSumAggregateOutputType | null
    _min: DeitiesMinAggregateOutputType | null
    min: DeitiesMinAggregateOutputType | null
    _max: DeitiesMaxAggregateOutputType | null
    max: DeitiesMaxAggregateOutputType | null
  }

  export type DeitiesAvgAggregateOutputType = {
    id: number | null
  }

  export type DeitiesSumAggregateOutputType = {
    id: number | null
  }

  export type DeitiesMinAggregateOutputType = {
    id: number | null
    name: string | null
    region: string | null
    created_on: Date | null
    type: string | null
  }

  export type DeitiesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    region: string | null
    created_on: Date | null
    type: string | null
  }

  export type DeitiesCountAggregateOutputType = {
    id: number
    name: number
    domain: number
    region: number
    created_on: number
    type: number
    _all: number
  }


  export type DeitiesAvgAggregateInputType = {
    id?: true
  }

  export type DeitiesSumAggregateInputType = {
    id?: true
  }

  export type DeitiesMinAggregateInputType = {
    id?: true
    name?: true
    region?: true
    created_on?: true
    type?: true
  }

  export type DeitiesMaxAggregateInputType = {
    id?: true
    name?: true
    region?: true
    created_on?: true
    type?: true
  }

  export type DeitiesCountAggregateInputType = {
    id?: true
    name?: true
    domain?: true
    region?: true
    created_on?: true
    type?: true
    _all?: true
  }

  export type DeitiesAggregateArgs = {
    /**
     * Filter which deities to aggregate.
     * 
    **/
    where?: deitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deities to fetch.
     * 
    **/
    orderBy?: Enumerable<deitiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: deitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned deities
    **/
    _count?: true | DeitiesCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | DeitiesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeitiesAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: DeitiesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeitiesSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: DeitiesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeitiesMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: DeitiesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeitiesMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: DeitiesMaxAggregateInputType
  }

  export type GetDeitiesAggregateType<T extends DeitiesAggregateArgs> = {
        [P in keyof T & keyof AggregateDeities]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeities[P]>
      : GetScalarType<T[P], AggregateDeities[P]>
  }


    
    
  export type DeitiesGroupByArgs = {
    where?: deitiesWhereInput
    orderBy?: Enumerable<deitiesOrderByInput>
    by: Array<DeitiesScalarFieldEnum>
    having?: deitiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeitiesCountAggregateInputType | true
    _avg?: DeitiesAvgAggregateInputType
    _sum?: DeitiesSumAggregateInputType
    _min?: DeitiesMinAggregateInputType
    _max?: DeitiesMaxAggregateInputType
  }


  export type DeitiesGroupByOutputType = {
    id: number
    name: string
    domain: string[]
    region: string
    created_on: Date | null
    type: string | null
    _count: DeitiesCountAggregateOutputType | null
    _avg: DeitiesAvgAggregateOutputType | null
    _sum: DeitiesSumAggregateOutputType | null
    _min: DeitiesMinAggregateOutputType | null
    _max: DeitiesMaxAggregateOutputType | null
  }

  type GetDeitiesGroupByPayload<T extends DeitiesGroupByArgs> = Promise<
    Array<
      PickArray<DeitiesGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof DeitiesGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], DeitiesGroupByOutputType[P]> 
            : GetScalarType<T[P], DeitiesGroupByOutputType[P]>
        }
      > 
    >


  export type deitiesSelect = {
    id?: boolean
    name?: boolean
    domain?: boolean
    region?: boolean
    created_on?: boolean
    type?: boolean
  }

  export type deitiesGetPayload<
    S extends boolean | null | undefined | deitiesArgs,
    U = keyof S
      > = S extends true
        ? deities
    : S extends undefined
    ? never
    : S extends deitiesArgs | deitiesFindManyArgs
    ?'include' extends U
    ? deities 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof deities ?deities [P]
  : 
     never
  } 
    : deities
  : deities


  type deitiesCountArgs = Merge<
    Omit<deitiesFindManyArgs, 'select' | 'include'> & {
      select?: DeitiesCountAggregateInputType | true
    }
  >

  export interface deitiesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Deities that matches the filter.
     * @param {deitiesFindUniqueArgs} args - Arguments to find a Deities
     * @example
     * // Get one Deities
     * const deities = await prisma.deities.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends deitiesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, deitiesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'deities'> extends True ? CheckSelect<T, Prisma__deitiesClient<deities>, Prisma__deitiesClient<deitiesGetPayload<T>>> : CheckSelect<T, Prisma__deitiesClient<deities | null >, Prisma__deitiesClient<deitiesGetPayload<T> | null >>

    /**
     * Find the first Deities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deitiesFindFirstArgs} args - Arguments to find a Deities
     * @example
     * // Get one Deities
     * const deities = await prisma.deities.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends deitiesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, deitiesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'deities'> extends True ? CheckSelect<T, Prisma__deitiesClient<deities>, Prisma__deitiesClient<deitiesGetPayload<T>>> : CheckSelect<T, Prisma__deitiesClient<deities | null >, Prisma__deitiesClient<deitiesGetPayload<T> | null >>

    /**
     * Find zero or more Deities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deitiesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Deities
     * const deities = await prisma.deities.findMany()
     * 
     * // Get first 10 Deities
     * const deities = await prisma.deities.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deitiesWithIdOnly = await prisma.deities.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends deitiesFindManyArgs>(
      args?: SelectSubset<T, deitiesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<deities>>, PrismaPromise<Array<deitiesGetPayload<T>>>>

    /**
     * Create a Deities.
     * @param {deitiesCreateArgs} args - Arguments to create a Deities.
     * @example
     * // Create one Deities
     * const Deities = await prisma.deities.create({
     *   data: {
     *     // ... data to create a Deities
     *   }
     * })
     * 
    **/
    create<T extends deitiesCreateArgs>(
      args: SelectSubset<T, deitiesCreateArgs>
    ): CheckSelect<T, Prisma__deitiesClient<deities>, Prisma__deitiesClient<deitiesGetPayload<T>>>

    /**
     * Create many Deities.
     *     @param {deitiesCreateManyArgs} args - Arguments to create many Deities.
     *     @example
     *     // Create many Deities
     *     const deities = await prisma.deities.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends deitiesCreateManyArgs>(
      args?: SelectSubset<T, deitiesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Deities.
     * @param {deitiesDeleteArgs} args - Arguments to delete one Deities.
     * @example
     * // Delete one Deities
     * const Deities = await prisma.deities.delete({
     *   where: {
     *     // ... filter to delete one Deities
     *   }
     * })
     * 
    **/
    delete<T extends deitiesDeleteArgs>(
      args: SelectSubset<T, deitiesDeleteArgs>
    ): CheckSelect<T, Prisma__deitiesClient<deities>, Prisma__deitiesClient<deitiesGetPayload<T>>>

    /**
     * Update one Deities.
     * @param {deitiesUpdateArgs} args - Arguments to update one Deities.
     * @example
     * // Update one Deities
     * const deities = await prisma.deities.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends deitiesUpdateArgs>(
      args: SelectSubset<T, deitiesUpdateArgs>
    ): CheckSelect<T, Prisma__deitiesClient<deities>, Prisma__deitiesClient<deitiesGetPayload<T>>>

    /**
     * Delete zero or more Deities.
     * @param {deitiesDeleteManyArgs} args - Arguments to filter Deities to delete.
     * @example
     * // Delete a few Deities
     * const { count } = await prisma.deities.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends deitiesDeleteManyArgs>(
      args?: SelectSubset<T, deitiesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Deities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deitiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Deities
     * const deities = await prisma.deities.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends deitiesUpdateManyArgs>(
      args: SelectSubset<T, deitiesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Deities.
     * @param {deitiesUpsertArgs} args - Arguments to update or create a Deities.
     * @example
     * // Update or create a Deities
     * const deities = await prisma.deities.upsert({
     *   create: {
     *     // ... data to create a Deities
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Deities we want to update
     *   }
     * })
    **/
    upsert<T extends deitiesUpsertArgs>(
      args: SelectSubset<T, deitiesUpsertArgs>
    ): CheckSelect<T, Prisma__deitiesClient<deities>, Prisma__deitiesClient<deitiesGetPayload<T>>>

    /**
     * Count the number of Deities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deitiesCountArgs} args - Arguments to filter Deities to count.
     * @example
     * // Count the number of Deities
     * const count = await prisma.deities.count({
     *   where: {
     *     // ... the filter for the Deities we want to count
     *   }
     * })
    **/
    count<T extends deitiesCountArgs>(
      args?: Subset<T, deitiesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeitiesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Deities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeitiesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeitiesAggregateArgs>(args: Subset<T, DeitiesAggregateArgs>): PrismaPromise<GetDeitiesAggregateType<T>>

    /**
     * Group by Deities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeitiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeitiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeitiesGroupByArgs['orderBy'] }
        : { orderBy?: DeitiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeitiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeitiesGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for deities.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__deitiesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * deities findUnique
   */
  export type deitiesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the deities
     * 
    **/
    select?: deitiesSelect | null
    /**
     * Throw an Error if a deities can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which deities to fetch.
     * 
    **/
    where: deitiesWhereUniqueInput
  }


  /**
   * deities findFirst
   */
  export type deitiesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the deities
     * 
    **/
    select?: deitiesSelect | null
    /**
     * Throw an Error if a deities can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which deities to fetch.
     * 
    **/
    where?: deitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deities to fetch.
     * 
    **/
    orderBy?: Enumerable<deitiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deities.
     * 
    **/
    cursor?: deitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deities.
     * 
    **/
    distinct?: Enumerable<DeitiesScalarFieldEnum>
  }


  /**
   * deities findMany
   */
  export type deitiesFindManyArgs = {
    /**
     * Select specific fields to fetch from the deities
     * 
    **/
    select?: deitiesSelect | null
    /**
     * Filter, which deities to fetch.
     * 
    **/
    where?: deitiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deities to fetch.
     * 
    **/
    orderBy?: Enumerable<deitiesOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing deities.
     * 
    **/
    cursor?: deitiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deities.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DeitiesScalarFieldEnum>
  }


  /**
   * deities create
   */
  export type deitiesCreateArgs = {
    /**
     * Select specific fields to fetch from the deities
     * 
    **/
    select?: deitiesSelect | null
    /**
     * The data needed to create a deities.
     * 
    **/
    data: XOR<deitiesCreateInput, deitiesUncheckedCreateInput>
  }


  /**
   * deities createMany
   */
  export type deitiesCreateManyArgs = {
    data: Enumerable<deitiesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * deities update
   */
  export type deitiesUpdateArgs = {
    /**
     * Select specific fields to fetch from the deities
     * 
    **/
    select?: deitiesSelect | null
    /**
     * The data needed to update a deities.
     * 
    **/
    data: XOR<deitiesUpdateInput, deitiesUncheckedUpdateInput>
    /**
     * Choose, which deities to update.
     * 
    **/
    where: deitiesWhereUniqueInput
  }


  /**
   * deities updateMany
   */
  export type deitiesUpdateManyArgs = {
    data: XOR<deitiesUpdateManyMutationInput, deitiesUncheckedUpdateManyInput>
    where?: deitiesWhereInput
  }


  /**
   * deities upsert
   */
  export type deitiesUpsertArgs = {
    /**
     * Select specific fields to fetch from the deities
     * 
    **/
    select?: deitiesSelect | null
    /**
     * The filter to search for the deities to update in case it exists.
     * 
    **/
    where: deitiesWhereUniqueInput
    /**
     * In case the deities found by the `where` argument doesn't exist, create a new deities with this data.
     * 
    **/
    create: XOR<deitiesCreateInput, deitiesUncheckedCreateInput>
    /**
     * In case the deities was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<deitiesUpdateInput, deitiesUncheckedUpdateInput>
  }


  /**
   * deities delete
   */
  export type deitiesDeleteArgs = {
    /**
     * Select specific fields to fetch from the deities
     * 
    **/
    select?: deitiesSelect | null
    /**
     * Filter which deities to delete.
     * 
    **/
    where: deitiesWhereUniqueInput
  }


  /**
   * deities deleteMany
   */
  export type deitiesDeleteManyArgs = {
    where?: deitiesWhereInput
  }


  /**
   * deities without action
   */
  export type deitiesArgs = {
    /**
     * Select specific fields to fetch from the deities
     * 
    **/
    select?: deitiesSelect | null
  }



  /**
   * Model items
   */


  export type AggregateItems = {
    _count: ItemsCountAggregateOutputType | null
    count: ItemsCountAggregateOutputType | null
    _avg: ItemsAvgAggregateOutputType | null
    avg: ItemsAvgAggregateOutputType | null
    _sum: ItemsSumAggregateOutputType | null
    sum: ItemsSumAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
    max: ItemsMaxAggregateOutputType | null
  }

  export type ItemsAvgAggregateOutputType = {
    id: number | null
  }

  export type ItemsSumAggregateOutputType = {
    id: number | null
  }

  export type ItemsMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ItemsMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ItemsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ItemsAvgAggregateInputType = {
    id?: true
  }

  export type ItemsSumAggregateInputType = {
    id?: true
  }

  export type ItemsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ItemsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ItemsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ItemsAggregateArgs = {
    /**
     * Filter which items to aggregate.
     * 
    **/
    where?: itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     * 
    **/
    orderBy?: Enumerable<itemsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned items
    **/
    _count?: true | ItemsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | ItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemsAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: ItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemsSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: ItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: ItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: ItemsMaxAggregateInputType
  }

  export type GetItemsAggregateType<T extends ItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItems[P]>
      : GetScalarType<T[P], AggregateItems[P]>
  }


    
    
  export type ItemsGroupByArgs = {
    where?: itemsWhereInput
    orderBy?: Enumerable<itemsOrderByInput>
    by: Array<ItemsScalarFieldEnum>
    having?: itemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemsCountAggregateInputType | true
    _avg?: ItemsAvgAggregateInputType
    _sum?: ItemsSumAggregateInputType
    _min?: ItemsMinAggregateInputType
    _max?: ItemsMaxAggregateInputType
  }


  export type ItemsGroupByOutputType = {
    id: number
    name: string
    _count: ItemsCountAggregateOutputType | null
    _avg: ItemsAvgAggregateOutputType | null
    _sum: ItemsSumAggregateOutputType | null
    _min: ItemsMinAggregateOutputType | null
    _max: ItemsMaxAggregateOutputType | null
  }

  type GetItemsGroupByPayload<T extends ItemsGroupByArgs> = Promise<
    Array<
      PickArray<ItemsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof ItemsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], ItemsGroupByOutputType[P]> 
            : GetScalarType<T[P], ItemsGroupByOutputType[P]>
        }
      > 
    >


  export type itemsSelect = {
    id?: boolean
    name?: boolean
  }

  export type itemsGetPayload<
    S extends boolean | null | undefined | itemsArgs,
    U = keyof S
      > = S extends true
        ? items
    : S extends undefined
    ? never
    : S extends itemsArgs | itemsFindManyArgs
    ?'include' extends U
    ? items 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof items ?items [P]
  : 
     never
  } 
    : items
  : items


  type itemsCountArgs = Merge<
    Omit<itemsFindManyArgs, 'select' | 'include'> & {
      select?: ItemsCountAggregateInputType | true
    }
  >

  export interface itemsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Items that matches the filter.
     * @param {itemsFindUniqueArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends itemsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, itemsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'items'> extends True ? CheckSelect<T, Prisma__itemsClient<items>, Prisma__itemsClient<itemsGetPayload<T>>> : CheckSelect<T, Prisma__itemsClient<items | null >, Prisma__itemsClient<itemsGetPayload<T> | null >>

    /**
     * Find the first Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemsFindFirstArgs} args - Arguments to find a Items
     * @example
     * // Get one Items
     * const items = await prisma.items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends itemsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, itemsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'items'> extends True ? CheckSelect<T, Prisma__itemsClient<items>, Prisma__itemsClient<itemsGetPayload<T>>> : CheckSelect<T, Prisma__itemsClient<items | null >, Prisma__itemsClient<itemsGetPayload<T> | null >>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.items.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemsWithIdOnly = await prisma.items.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends itemsFindManyArgs>(
      args?: SelectSubset<T, itemsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<items>>, PrismaPromise<Array<itemsGetPayload<T>>>>

    /**
     * Create a Items.
     * @param {itemsCreateArgs} args - Arguments to create a Items.
     * @example
     * // Create one Items
     * const Items = await prisma.items.create({
     *   data: {
     *     // ... data to create a Items
     *   }
     * })
     * 
    **/
    create<T extends itemsCreateArgs>(
      args: SelectSubset<T, itemsCreateArgs>
    ): CheckSelect<T, Prisma__itemsClient<items>, Prisma__itemsClient<itemsGetPayload<T>>>

    /**
     * Create many Items.
     *     @param {itemsCreateManyArgs} args - Arguments to create many Items.
     *     @example
     *     // Create many Items
     *     const items = await prisma.items.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends itemsCreateManyArgs>(
      args?: SelectSubset<T, itemsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Items.
     * @param {itemsDeleteArgs} args - Arguments to delete one Items.
     * @example
     * // Delete one Items
     * const Items = await prisma.items.delete({
     *   where: {
     *     // ... filter to delete one Items
     *   }
     * })
     * 
    **/
    delete<T extends itemsDeleteArgs>(
      args: SelectSubset<T, itemsDeleteArgs>
    ): CheckSelect<T, Prisma__itemsClient<items>, Prisma__itemsClient<itemsGetPayload<T>>>

    /**
     * Update one Items.
     * @param {itemsUpdateArgs} args - Arguments to update one Items.
     * @example
     * // Update one Items
     * const items = await prisma.items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends itemsUpdateArgs>(
      args: SelectSubset<T, itemsUpdateArgs>
    ): CheckSelect<T, Prisma__itemsClient<items>, Prisma__itemsClient<itemsGetPayload<T>>>

    /**
     * Delete zero or more Items.
     * @param {itemsDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends itemsDeleteManyArgs>(
      args?: SelectSubset<T, itemsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const items = await prisma.items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends itemsUpdateManyArgs>(
      args: SelectSubset<T, itemsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Items.
     * @param {itemsUpsertArgs} args - Arguments to update or create a Items.
     * @example
     * // Update or create a Items
     * const items = await prisma.items.upsert({
     *   create: {
     *     // ... data to create a Items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Items we want to update
     *   }
     * })
    **/
    upsert<T extends itemsUpsertArgs>(
      args: SelectSubset<T, itemsUpsertArgs>
    ): CheckSelect<T, Prisma__itemsClient<items>, Prisma__itemsClient<itemsGetPayload<T>>>

    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {itemsCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.items.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends itemsCountArgs>(
      args?: Subset<T, itemsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemsAggregateArgs>(args: Subset<T, ItemsAggregateArgs>): PrismaPromise<GetItemsAggregateType<T>>

    /**
     * Group by Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemsGroupByArgs['orderBy'] }
        : { orderBy?: ItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__itemsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * items findUnique
   */
  export type itemsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
    /**
     * Throw an Error if a items can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which items to fetch.
     * 
    **/
    where: itemsWhereUniqueInput
  }


  /**
   * items findFirst
   */
  export type itemsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
    /**
     * Throw an Error if a items can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which items to fetch.
     * 
    **/
    where?: itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     * 
    **/
    orderBy?: Enumerable<itemsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for items.
     * 
    **/
    cursor?: itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of items.
     * 
    **/
    distinct?: Enumerable<ItemsScalarFieldEnum>
  }


  /**
   * items findMany
   */
  export type itemsFindManyArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
    /**
     * Filter, which items to fetch.
     * 
    **/
    where?: itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of items to fetch.
     * 
    **/
    orderBy?: Enumerable<itemsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing items.
     * 
    **/
    cursor?: itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` items from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` items.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ItemsScalarFieldEnum>
  }


  /**
   * items create
   */
  export type itemsCreateArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
    /**
     * The data needed to create a items.
     * 
    **/
    data: XOR<itemsCreateInput, itemsUncheckedCreateInput>
  }


  /**
   * items createMany
   */
  export type itemsCreateManyArgs = {
    data: Enumerable<itemsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * items update
   */
  export type itemsUpdateArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
    /**
     * The data needed to update a items.
     * 
    **/
    data: XOR<itemsUpdateInput, itemsUncheckedUpdateInput>
    /**
     * Choose, which items to update.
     * 
    **/
    where: itemsWhereUniqueInput
  }


  /**
   * items updateMany
   */
  export type itemsUpdateManyArgs = {
    data: XOR<itemsUpdateManyMutationInput, itemsUncheckedUpdateManyInput>
    where?: itemsWhereInput
  }


  /**
   * items upsert
   */
  export type itemsUpsertArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
    /**
     * The filter to search for the items to update in case it exists.
     * 
    **/
    where: itemsWhereUniqueInput
    /**
     * In case the items found by the `where` argument doesn't exist, create a new items with this data.
     * 
    **/
    create: XOR<itemsCreateInput, itemsUncheckedCreateInput>
    /**
     * In case the items was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<itemsUpdateInput, itemsUncheckedUpdateInput>
  }


  /**
   * items delete
   */
  export type itemsDeleteArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
    /**
     * Filter which items to delete.
     * 
    **/
    where: itemsWhereUniqueInput
  }


  /**
   * items deleteMany
   */
  export type itemsDeleteManyArgs = {
    where?: itemsWhereInput
  }


  /**
   * items without action
   */
  export type itemsArgs = {
    /**
     * Select specific fields to fetch from the items
     * 
    **/
    select?: itemsSelect | null
  }



  /**
   * Model mortals
   */


  export type AggregateMortals = {
    _count: MortalsCountAggregateOutputType | null
    count: MortalsCountAggregateOutputType | null
    _avg: MortalsAvgAggregateOutputType | null
    avg: MortalsAvgAggregateOutputType | null
    _sum: MortalsSumAggregateOutputType | null
    sum: MortalsSumAggregateOutputType | null
    _min: MortalsMinAggregateOutputType | null
    min: MortalsMinAggregateOutputType | null
    _max: MortalsMaxAggregateOutputType | null
    max: MortalsMaxAggregateOutputType | null
  }

  export type MortalsAvgAggregateOutputType = {
    id: number | null
  }

  export type MortalsSumAggregateOutputType = {
    id: number | null
  }

  export type MortalsMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type MortalsMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type MortalsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type MortalsAvgAggregateInputType = {
    id?: true
  }

  export type MortalsSumAggregateInputType = {
    id?: true
  }

  export type MortalsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type MortalsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type MortalsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type MortalsAggregateArgs = {
    /**
     * Filter which mortals to aggregate.
     * 
    **/
    where?: mortalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mortals to fetch.
     * 
    **/
    orderBy?: Enumerable<mortalsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: mortalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mortals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mortals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned mortals
    **/
    _count?: true | MortalsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | MortalsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MortalsAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: MortalsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MortalsSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: MortalsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MortalsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: MortalsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MortalsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: MortalsMaxAggregateInputType
  }

  export type GetMortalsAggregateType<T extends MortalsAggregateArgs> = {
        [P in keyof T & keyof AggregateMortals]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMortals[P]>
      : GetScalarType<T[P], AggregateMortals[P]>
  }


    
    
  export type MortalsGroupByArgs = {
    where?: mortalsWhereInput
    orderBy?: Enumerable<mortalsOrderByInput>
    by: Array<MortalsScalarFieldEnum>
    having?: mortalsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MortalsCountAggregateInputType | true
    _avg?: MortalsAvgAggregateInputType
    _sum?: MortalsSumAggregateInputType
    _min?: MortalsMinAggregateInputType
    _max?: MortalsMaxAggregateInputType
  }


  export type MortalsGroupByOutputType = {
    id: number
    name: string
    _count: MortalsCountAggregateOutputType | null
    _avg: MortalsAvgAggregateOutputType | null
    _sum: MortalsSumAggregateOutputType | null
    _min: MortalsMinAggregateOutputType | null
    _max: MortalsMaxAggregateOutputType | null
  }

  type GetMortalsGroupByPayload<T extends MortalsGroupByArgs> = Promise<
    Array<
      PickArray<MortalsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof MortalsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], MortalsGroupByOutputType[P]> 
            : GetScalarType<T[P], MortalsGroupByOutputType[P]>
        }
      > 
    >


  export type mortalsSelect = {
    id?: boolean
    name?: boolean
  }

  export type mortalsGetPayload<
    S extends boolean | null | undefined | mortalsArgs,
    U = keyof S
      > = S extends true
        ? mortals
    : S extends undefined
    ? never
    : S extends mortalsArgs | mortalsFindManyArgs
    ?'include' extends U
    ? mortals 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof mortals ?mortals [P]
  : 
     never
  } 
    : mortals
  : mortals


  type mortalsCountArgs = Merge<
    Omit<mortalsFindManyArgs, 'select' | 'include'> & {
      select?: MortalsCountAggregateInputType | true
    }
  >

  export interface mortalsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Mortals that matches the filter.
     * @param {mortalsFindUniqueArgs} args - Arguments to find a Mortals
     * @example
     * // Get one Mortals
     * const mortals = await prisma.mortals.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends mortalsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, mortalsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'mortals'> extends True ? CheckSelect<T, Prisma__mortalsClient<mortals>, Prisma__mortalsClient<mortalsGetPayload<T>>> : CheckSelect<T, Prisma__mortalsClient<mortals | null >, Prisma__mortalsClient<mortalsGetPayload<T> | null >>

    /**
     * Find the first Mortals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mortalsFindFirstArgs} args - Arguments to find a Mortals
     * @example
     * // Get one Mortals
     * const mortals = await prisma.mortals.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends mortalsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, mortalsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'mortals'> extends True ? CheckSelect<T, Prisma__mortalsClient<mortals>, Prisma__mortalsClient<mortalsGetPayload<T>>> : CheckSelect<T, Prisma__mortalsClient<mortals | null >, Prisma__mortalsClient<mortalsGetPayload<T> | null >>

    /**
     * Find zero or more Mortals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mortalsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mortals
     * const mortals = await prisma.mortals.findMany()
     * 
     * // Get first 10 Mortals
     * const mortals = await prisma.mortals.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mortalsWithIdOnly = await prisma.mortals.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends mortalsFindManyArgs>(
      args?: SelectSubset<T, mortalsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<mortals>>, PrismaPromise<Array<mortalsGetPayload<T>>>>

    /**
     * Create a Mortals.
     * @param {mortalsCreateArgs} args - Arguments to create a Mortals.
     * @example
     * // Create one Mortals
     * const Mortals = await prisma.mortals.create({
     *   data: {
     *     // ... data to create a Mortals
     *   }
     * })
     * 
    **/
    create<T extends mortalsCreateArgs>(
      args: SelectSubset<T, mortalsCreateArgs>
    ): CheckSelect<T, Prisma__mortalsClient<mortals>, Prisma__mortalsClient<mortalsGetPayload<T>>>

    /**
     * Create many Mortals.
     *     @param {mortalsCreateManyArgs} args - Arguments to create many Mortals.
     *     @example
     *     // Create many Mortals
     *     const mortals = await prisma.mortals.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends mortalsCreateManyArgs>(
      args?: SelectSubset<T, mortalsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Mortals.
     * @param {mortalsDeleteArgs} args - Arguments to delete one Mortals.
     * @example
     * // Delete one Mortals
     * const Mortals = await prisma.mortals.delete({
     *   where: {
     *     // ... filter to delete one Mortals
     *   }
     * })
     * 
    **/
    delete<T extends mortalsDeleteArgs>(
      args: SelectSubset<T, mortalsDeleteArgs>
    ): CheckSelect<T, Prisma__mortalsClient<mortals>, Prisma__mortalsClient<mortalsGetPayload<T>>>

    /**
     * Update one Mortals.
     * @param {mortalsUpdateArgs} args - Arguments to update one Mortals.
     * @example
     * // Update one Mortals
     * const mortals = await prisma.mortals.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends mortalsUpdateArgs>(
      args: SelectSubset<T, mortalsUpdateArgs>
    ): CheckSelect<T, Prisma__mortalsClient<mortals>, Prisma__mortalsClient<mortalsGetPayload<T>>>

    /**
     * Delete zero or more Mortals.
     * @param {mortalsDeleteManyArgs} args - Arguments to filter Mortals to delete.
     * @example
     * // Delete a few Mortals
     * const { count } = await prisma.mortals.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends mortalsDeleteManyArgs>(
      args?: SelectSubset<T, mortalsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mortals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mortalsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mortals
     * const mortals = await prisma.mortals.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends mortalsUpdateManyArgs>(
      args: SelectSubset<T, mortalsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Mortals.
     * @param {mortalsUpsertArgs} args - Arguments to update or create a Mortals.
     * @example
     * // Update or create a Mortals
     * const mortals = await prisma.mortals.upsert({
     *   create: {
     *     // ... data to create a Mortals
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mortals we want to update
     *   }
     * })
    **/
    upsert<T extends mortalsUpsertArgs>(
      args: SelectSubset<T, mortalsUpsertArgs>
    ): CheckSelect<T, Prisma__mortalsClient<mortals>, Prisma__mortalsClient<mortalsGetPayload<T>>>

    /**
     * Count the number of Mortals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mortalsCountArgs} args - Arguments to filter Mortals to count.
     * @example
     * // Count the number of Mortals
     * const count = await prisma.mortals.count({
     *   where: {
     *     // ... the filter for the Mortals we want to count
     *   }
     * })
    **/
    count<T extends mortalsCountArgs>(
      args?: Subset<T, mortalsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MortalsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mortals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MortalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MortalsAggregateArgs>(args: Subset<T, MortalsAggregateArgs>): PrismaPromise<GetMortalsAggregateType<T>>

    /**
     * Group by Mortals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MortalsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MortalsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MortalsGroupByArgs['orderBy'] }
        : { orderBy?: MortalsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MortalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMortalsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for mortals.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__mortalsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * mortals findUnique
   */
  export type mortalsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the mortals
     * 
    **/
    select?: mortalsSelect | null
    /**
     * Throw an Error if a mortals can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which mortals to fetch.
     * 
    **/
    where: mortalsWhereUniqueInput
  }


  /**
   * mortals findFirst
   */
  export type mortalsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the mortals
     * 
    **/
    select?: mortalsSelect | null
    /**
     * Throw an Error if a mortals can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which mortals to fetch.
     * 
    **/
    where?: mortalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mortals to fetch.
     * 
    **/
    orderBy?: Enumerable<mortalsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mortals.
     * 
    **/
    cursor?: mortalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mortals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mortals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mortals.
     * 
    **/
    distinct?: Enumerable<MortalsScalarFieldEnum>
  }


  /**
   * mortals findMany
   */
  export type mortalsFindManyArgs = {
    /**
     * Select specific fields to fetch from the mortals
     * 
    **/
    select?: mortalsSelect | null
    /**
     * Filter, which mortals to fetch.
     * 
    **/
    where?: mortalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mortals to fetch.
     * 
    **/
    orderBy?: Enumerable<mortalsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing mortals.
     * 
    **/
    cursor?: mortalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mortals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mortals.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MortalsScalarFieldEnum>
  }


  /**
   * mortals create
   */
  export type mortalsCreateArgs = {
    /**
     * Select specific fields to fetch from the mortals
     * 
    **/
    select?: mortalsSelect | null
    /**
     * The data needed to create a mortals.
     * 
    **/
    data: XOR<mortalsCreateInput, mortalsUncheckedCreateInput>
  }


  /**
   * mortals createMany
   */
  export type mortalsCreateManyArgs = {
    data: Enumerable<mortalsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * mortals update
   */
  export type mortalsUpdateArgs = {
    /**
     * Select specific fields to fetch from the mortals
     * 
    **/
    select?: mortalsSelect | null
    /**
     * The data needed to update a mortals.
     * 
    **/
    data: XOR<mortalsUpdateInput, mortalsUncheckedUpdateInput>
    /**
     * Choose, which mortals to update.
     * 
    **/
    where: mortalsWhereUniqueInput
  }


  /**
   * mortals updateMany
   */
  export type mortalsUpdateManyArgs = {
    data: XOR<mortalsUpdateManyMutationInput, mortalsUncheckedUpdateManyInput>
    where?: mortalsWhereInput
  }


  /**
   * mortals upsert
   */
  export type mortalsUpsertArgs = {
    /**
     * Select specific fields to fetch from the mortals
     * 
    **/
    select?: mortalsSelect | null
    /**
     * The filter to search for the mortals to update in case it exists.
     * 
    **/
    where: mortalsWhereUniqueInput
    /**
     * In case the mortals found by the `where` argument doesn't exist, create a new mortals with this data.
     * 
    **/
    create: XOR<mortalsCreateInput, mortalsUncheckedCreateInput>
    /**
     * In case the mortals was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<mortalsUpdateInput, mortalsUncheckedUpdateInput>
  }


  /**
   * mortals delete
   */
  export type mortalsDeleteArgs = {
    /**
     * Select specific fields to fetch from the mortals
     * 
    **/
    select?: mortalsSelect | null
    /**
     * Filter which mortals to delete.
     * 
    **/
    where: mortalsWhereUniqueInput
  }


  /**
   * mortals deleteMany
   */
  export type mortalsDeleteManyArgs = {
    where?: mortalsWhereInput
  }


  /**
   * mortals without action
   */
  export type mortalsArgs = {
    /**
     * Select specific fields to fetch from the mortals
     * 
    **/
    select?: mortalsSelect | null
  }



  /**
   * Model works
   */


  export type AggregateWorks = {
    _count: WorksCountAggregateOutputType | null
    count: WorksCountAggregateOutputType | null
    _avg: WorksAvgAggregateOutputType | null
    avg: WorksAvgAggregateOutputType | null
    _sum: WorksSumAggregateOutputType | null
    sum: WorksSumAggregateOutputType | null
    _min: WorksMinAggregateOutputType | null
    min: WorksMinAggregateOutputType | null
    _max: WorksMaxAggregateOutputType | null
    max: WorksMaxAggregateOutputType | null
  }

  export type WorksAvgAggregateOutputType = {
    id: number | null
  }

  export type WorksSumAggregateOutputType = {
    id: number | null
  }

  export type WorksMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type WorksMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type WorksCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type WorksAvgAggregateInputType = {
    id?: true
  }

  export type WorksSumAggregateInputType = {
    id?: true
  }

  export type WorksMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type WorksMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type WorksCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type WorksAggregateArgs = {
    /**
     * Filter which works to aggregate.
     * 
    **/
    where?: worksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of works to fetch.
     * 
    **/
    orderBy?: Enumerable<worksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: worksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` works from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` works.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned works
    **/
    _count?: true | WorksCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | WorksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorksAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: WorksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorksSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: WorksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorksMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: WorksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorksMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: WorksMaxAggregateInputType
  }

  export type GetWorksAggregateType<T extends WorksAggregateArgs> = {
        [P in keyof T & keyof AggregateWorks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorks[P]>
      : GetScalarType<T[P], AggregateWorks[P]>
  }


    
    
  export type WorksGroupByArgs = {
    where?: worksWhereInput
    orderBy?: Enumerable<worksOrderByInput>
    by: Array<WorksScalarFieldEnum>
    having?: worksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorksCountAggregateInputType | true
    _avg?: WorksAvgAggregateInputType
    _sum?: WorksSumAggregateInputType
    _min?: WorksMinAggregateInputType
    _max?: WorksMaxAggregateInputType
  }


  export type WorksGroupByOutputType = {
    id: number
    name: string
    _count: WorksCountAggregateOutputType | null
    _avg: WorksAvgAggregateOutputType | null
    _sum: WorksSumAggregateOutputType | null
    _min: WorksMinAggregateOutputType | null
    _max: WorksMaxAggregateOutputType | null
  }

  type GetWorksGroupByPayload<T extends WorksGroupByArgs> = Promise<
    Array<
      PickArray<WorksGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof WorksGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], WorksGroupByOutputType[P]> 
            : GetScalarType<T[P], WorksGroupByOutputType[P]>
        }
      > 
    >


  export type worksSelect = {
    id?: boolean
    name?: boolean
  }

  export type worksGetPayload<
    S extends boolean | null | undefined | worksArgs,
    U = keyof S
      > = S extends true
        ? works
    : S extends undefined
    ? never
    : S extends worksArgs | worksFindManyArgs
    ?'include' extends U
    ? works 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof works ?works [P]
  : 
     never
  } 
    : works
  : works


  type worksCountArgs = Merge<
    Omit<worksFindManyArgs, 'select' | 'include'> & {
      select?: WorksCountAggregateInputType | true
    }
  >

  export interface worksDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Works that matches the filter.
     * @param {worksFindUniqueArgs} args - Arguments to find a Works
     * @example
     * // Get one Works
     * const works = await prisma.works.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends worksFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, worksFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'works'> extends True ? CheckSelect<T, Prisma__worksClient<works>, Prisma__worksClient<worksGetPayload<T>>> : CheckSelect<T, Prisma__worksClient<works | null >, Prisma__worksClient<worksGetPayload<T> | null >>

    /**
     * Find the first Works that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {worksFindFirstArgs} args - Arguments to find a Works
     * @example
     * // Get one Works
     * const works = await prisma.works.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends worksFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, worksFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'works'> extends True ? CheckSelect<T, Prisma__worksClient<works>, Prisma__worksClient<worksGetPayload<T>>> : CheckSelect<T, Prisma__worksClient<works | null >, Prisma__worksClient<worksGetPayload<T> | null >>

    /**
     * Find zero or more Works that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {worksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Works
     * const works = await prisma.works.findMany()
     * 
     * // Get first 10 Works
     * const works = await prisma.works.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const worksWithIdOnly = await prisma.works.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends worksFindManyArgs>(
      args?: SelectSubset<T, worksFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<works>>, PrismaPromise<Array<worksGetPayload<T>>>>

    /**
     * Create a Works.
     * @param {worksCreateArgs} args - Arguments to create a Works.
     * @example
     * // Create one Works
     * const Works = await prisma.works.create({
     *   data: {
     *     // ... data to create a Works
     *   }
     * })
     * 
    **/
    create<T extends worksCreateArgs>(
      args: SelectSubset<T, worksCreateArgs>
    ): CheckSelect<T, Prisma__worksClient<works>, Prisma__worksClient<worksGetPayload<T>>>

    /**
     * Create many Works.
     *     @param {worksCreateManyArgs} args - Arguments to create many Works.
     *     @example
     *     // Create many Works
     *     const works = await prisma.works.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends worksCreateManyArgs>(
      args?: SelectSubset<T, worksCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Works.
     * @param {worksDeleteArgs} args - Arguments to delete one Works.
     * @example
     * // Delete one Works
     * const Works = await prisma.works.delete({
     *   where: {
     *     // ... filter to delete one Works
     *   }
     * })
     * 
    **/
    delete<T extends worksDeleteArgs>(
      args: SelectSubset<T, worksDeleteArgs>
    ): CheckSelect<T, Prisma__worksClient<works>, Prisma__worksClient<worksGetPayload<T>>>

    /**
     * Update one Works.
     * @param {worksUpdateArgs} args - Arguments to update one Works.
     * @example
     * // Update one Works
     * const works = await prisma.works.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends worksUpdateArgs>(
      args: SelectSubset<T, worksUpdateArgs>
    ): CheckSelect<T, Prisma__worksClient<works>, Prisma__worksClient<worksGetPayload<T>>>

    /**
     * Delete zero or more Works.
     * @param {worksDeleteManyArgs} args - Arguments to filter Works to delete.
     * @example
     * // Delete a few Works
     * const { count } = await prisma.works.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends worksDeleteManyArgs>(
      args?: SelectSubset<T, worksDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Works.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {worksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Works
     * const works = await prisma.works.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends worksUpdateManyArgs>(
      args: SelectSubset<T, worksUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Works.
     * @param {worksUpsertArgs} args - Arguments to update or create a Works.
     * @example
     * // Update or create a Works
     * const works = await prisma.works.upsert({
     *   create: {
     *     // ... data to create a Works
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Works we want to update
     *   }
     * })
    **/
    upsert<T extends worksUpsertArgs>(
      args: SelectSubset<T, worksUpsertArgs>
    ): CheckSelect<T, Prisma__worksClient<works>, Prisma__worksClient<worksGetPayload<T>>>

    /**
     * Count the number of Works.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {worksCountArgs} args - Arguments to filter Works to count.
     * @example
     * // Count the number of Works
     * const count = await prisma.works.count({
     *   where: {
     *     // ... the filter for the Works we want to count
     *   }
     * })
    **/
    count<T extends worksCountArgs>(
      args?: Subset<T, worksCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Works.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorksAggregateArgs>(args: Subset<T, WorksAggregateArgs>): PrismaPromise<GetWorksAggregateType<T>>

    /**
     * Group by Works.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorksGroupByArgs['orderBy'] }
        : { orderBy?: WorksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorksGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for works.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__worksClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * works findUnique
   */
  export type worksFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the works
     * 
    **/
    select?: worksSelect | null
    /**
     * Throw an Error if a works can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which works to fetch.
     * 
    **/
    where: worksWhereUniqueInput
  }


  /**
   * works findFirst
   */
  export type worksFindFirstArgs = {
    /**
     * Select specific fields to fetch from the works
     * 
    **/
    select?: worksSelect | null
    /**
     * Throw an Error if a works can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which works to fetch.
     * 
    **/
    where?: worksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of works to fetch.
     * 
    **/
    orderBy?: Enumerable<worksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for works.
     * 
    **/
    cursor?: worksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` works from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` works.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of works.
     * 
    **/
    distinct?: Enumerable<WorksScalarFieldEnum>
  }


  /**
   * works findMany
   */
  export type worksFindManyArgs = {
    /**
     * Select specific fields to fetch from the works
     * 
    **/
    select?: worksSelect | null
    /**
     * Filter, which works to fetch.
     * 
    **/
    where?: worksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of works to fetch.
     * 
    **/
    orderBy?: Enumerable<worksOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing works.
     * 
    **/
    cursor?: worksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` works from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` works.
     * 
    **/
    skip?: number
    distinct?: Enumerable<WorksScalarFieldEnum>
  }


  /**
   * works create
   */
  export type worksCreateArgs = {
    /**
     * Select specific fields to fetch from the works
     * 
    **/
    select?: worksSelect | null
    /**
     * The data needed to create a works.
     * 
    **/
    data: XOR<worksCreateInput, worksUncheckedCreateInput>
  }


  /**
   * works createMany
   */
  export type worksCreateManyArgs = {
    data: Enumerable<worksCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * works update
   */
  export type worksUpdateArgs = {
    /**
     * Select specific fields to fetch from the works
     * 
    **/
    select?: worksSelect | null
    /**
     * The data needed to update a works.
     * 
    **/
    data: XOR<worksUpdateInput, worksUncheckedUpdateInput>
    /**
     * Choose, which works to update.
     * 
    **/
    where: worksWhereUniqueInput
  }


  /**
   * works updateMany
   */
  export type worksUpdateManyArgs = {
    data: XOR<worksUpdateManyMutationInput, worksUncheckedUpdateManyInput>
    where?: worksWhereInput
  }


  /**
   * works upsert
   */
  export type worksUpsertArgs = {
    /**
     * Select specific fields to fetch from the works
     * 
    **/
    select?: worksSelect | null
    /**
     * The filter to search for the works to update in case it exists.
     * 
    **/
    where: worksWhereUniqueInput
    /**
     * In case the works found by the `where` argument doesn't exist, create a new works with this data.
     * 
    **/
    create: XOR<worksCreateInput, worksUncheckedCreateInput>
    /**
     * In case the works was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<worksUpdateInput, worksUncheckedUpdateInput>
  }


  /**
   * works delete
   */
  export type worksDeleteArgs = {
    /**
     * Select specific fields to fetch from the works
     * 
    **/
    select?: worksSelect | null
    /**
     * Filter which works to delete.
     * 
    **/
    where: worksWhereUniqueInput
  }


  /**
   * works deleteMany
   */
  export type worksDeleteManyArgs = {
    where?: worksWhereInput
  }


  /**
   * works without action
   */
  export type worksArgs = {
    /**
     * Select specific fields to fetch from the works
     * 
    **/
    select?: worksSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AuthorsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    region: 'region'
  };

  export type AuthorsScalarFieldEnum = (typeof AuthorsScalarFieldEnum)[keyof typeof AuthorsScalarFieldEnum]


  export const CreaturesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    race: 'race'
  };

  export type CreaturesScalarFieldEnum = (typeof CreaturesScalarFieldEnum)[keyof typeof CreaturesScalarFieldEnum]


  export const DeitiesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    domain: 'domain',
    region: 'region',
    created_on: 'created_on',
    type: 'type'
  };

  export type DeitiesScalarFieldEnum = (typeof DeitiesScalarFieldEnum)[keyof typeof DeitiesScalarFieldEnum]


  export const ItemsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ItemsScalarFieldEnum = (typeof ItemsScalarFieldEnum)[keyof typeof ItemsScalarFieldEnum]


  export const MortalsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type MortalsScalarFieldEnum = (typeof MortalsScalarFieldEnum)[keyof typeof MortalsScalarFieldEnum]


  export const WorksScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type WorksScalarFieldEnum = (typeof WorksScalarFieldEnum)[keyof typeof WorksScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type authorsWhereInput = {
    AND?: Enumerable<authorsWhereInput>
    OR?: Enumerable<authorsWhereInput>
    NOT?: Enumerable<authorsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    region?: IntFilter | number
  }

  export type authorsOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    region?: SortOrder
  }

  export type authorsWhereUniqueInput = {
    id?: number
  }

  export type authorsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<authorsScalarWhereWithAggregatesInput>
    OR?: Enumerable<authorsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<authorsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    region?: IntWithAggregatesFilter | number
  }

  export type creaturesWhereInput = {
    AND?: Enumerable<creaturesWhereInput>
    OR?: Enumerable<creaturesWhereInput>
    NOT?: Enumerable<creaturesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    race?: IntFilter | number
  }

  export type creaturesOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    race?: SortOrder
  }

  export type creaturesWhereUniqueInput = {
    id?: number
  }

  export type creaturesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<creaturesScalarWhereWithAggregatesInput>
    OR?: Enumerable<creaturesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<creaturesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    race?: IntWithAggregatesFilter | number
  }

  export type deitiesWhereInput = {
    AND?: Enumerable<deitiesWhereInput>
    OR?: Enumerable<deitiesWhereInput>
    NOT?: Enumerable<deitiesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    domain?: StringNullableListFilter
    region?: StringFilter | string
    created_on?: DateTimeNullableFilter | Date | string | null
    type?: StringNullableFilter | string | null
  }

  export type deitiesOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    domain?: SortOrder
    region?: SortOrder
    created_on?: SortOrder
    type?: SortOrder
  }

  export type deitiesWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type deitiesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<deitiesScalarWhereWithAggregatesInput>
    OR?: Enumerable<deitiesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<deitiesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    domain?: StringNullableListFilter
    region?: StringWithAggregatesFilter | string
    created_on?: DateTimeNullableWithAggregatesFilter | Date | string | null
    type?: StringNullableWithAggregatesFilter | string | null
  }

  export type itemsWhereInput = {
    AND?: Enumerable<itemsWhereInput>
    OR?: Enumerable<itemsWhereInput>
    NOT?: Enumerable<itemsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
  }

  export type itemsOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type itemsWhereUniqueInput = {
    id?: number
  }

  export type itemsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<itemsScalarWhereWithAggregatesInput>
    OR?: Enumerable<itemsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<itemsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type mortalsWhereInput = {
    AND?: Enumerable<mortalsWhereInput>
    OR?: Enumerable<mortalsWhereInput>
    NOT?: Enumerable<mortalsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
  }

  export type mortalsOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type mortalsWhereUniqueInput = {
    id?: number
  }

  export type mortalsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<mortalsScalarWhereWithAggregatesInput>
    OR?: Enumerable<mortalsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<mortalsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type worksWhereInput = {
    AND?: Enumerable<worksWhereInput>
    OR?: Enumerable<worksWhereInput>
    NOT?: Enumerable<worksWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
  }

  export type worksOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type worksWhereUniqueInput = {
    id?: number
  }

  export type worksScalarWhereWithAggregatesInput = {
    AND?: Enumerable<worksScalarWhereWithAggregatesInput>
    OR?: Enumerable<worksScalarWhereWithAggregatesInput>
    NOT?: Enumerable<worksScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type authorsCreateInput = {
    name: string
    region: number
  }

  export type authorsUncheckedCreateInput = {
    id?: number
    name: string
    region: number
  }

  export type authorsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    region?: IntFieldUpdateOperationsInput | number
  }

  export type authorsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    region?: IntFieldUpdateOperationsInput | number
  }

  export type authorsCreateManyInput = {
    id?: number
    name: string
    region: number
  }

  export type authorsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    region?: IntFieldUpdateOperationsInput | number
  }

  export type authorsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    region?: IntFieldUpdateOperationsInput | number
  }

  export type creaturesCreateInput = {
    name: string
    race: number
  }

  export type creaturesUncheckedCreateInput = {
    id?: number
    name: string
    race: number
  }

  export type creaturesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    race?: IntFieldUpdateOperationsInput | number
  }

  export type creaturesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    race?: IntFieldUpdateOperationsInput | number
  }

  export type creaturesCreateManyInput = {
    id?: number
    name: string
    race: number
  }

  export type creaturesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    race?: IntFieldUpdateOperationsInput | number
  }

  export type creaturesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    race?: IntFieldUpdateOperationsInput | number
  }

  export type deitiesCreateInput = {
    name: string
    region: string
    created_on?: Date | string | null
    type?: string | null
    domain?: deitiesCreatedomainInput | Enumerable<string>
  }

  export type deitiesUncheckedCreateInput = {
    id?: number
    name: string
    region: string
    created_on?: Date | string | null
    type?: string | null
    domain?: deitiesCreatedomainInput | Enumerable<string>
  }

  export type deitiesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    created_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    domain?: deitiesUpdatedomainInput | Enumerable<string>
  }

  export type deitiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    created_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    domain?: deitiesUpdatedomainInput | Enumerable<string>
  }

  export type deitiesCreateManyInput = {
    id?: number
    name: string
    region: string
    created_on?: Date | string | null
    type?: string | null
    domain?: deitiesCreateManydomainInput | Enumerable<string>
  }

  export type deitiesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    created_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    domain?: deitiesUpdatedomainInput | Enumerable<string>
  }

  export type deitiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    created_on?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    domain?: deitiesUpdatedomainInput | Enumerable<string>
  }

  export type itemsCreateInput = {
    name: string
  }

  export type itemsUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type itemsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type itemsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type itemsCreateManyInput = {
    id?: number
    name: string
  }

  export type itemsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type itemsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type mortalsCreateInput = {
    name: string
  }

  export type mortalsUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type mortalsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type mortalsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type mortalsCreateManyInput = {
    id?: number
    name: string
  }

  export type mortalsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type mortalsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type worksCreateInput = {
    name: string
  }

  export type worksUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type worksUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type worksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type worksCreateManyInput = {
    id?: number
    name: string
  }

  export type worksUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type worksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type deitiesCreatedomainInput = {
    set: Enumerable<string>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type deitiesUpdatedomainInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type deitiesCreateManydomainInput = {
    set: Enumerable<string>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}